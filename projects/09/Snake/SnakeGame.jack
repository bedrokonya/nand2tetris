/**
 * Implements the Square Dance game.
 * This simple game allows the user to move a black square around
 * the screen, and change the square's size during the movement.
 * When the game starts, a square of 30 by 30 pixels is shown at the
 * top-left corner of the screen. The user controls the square as follows.
 * The 4 arrow keys are used to move the square up, down, left, and right.
 * The 'z' and 'x' keys are used, respectively, to decrement and increment
 * the square's size. The 'q' key is used to quit the game.
 */

class SnakeGame {

   // static int TRANSPOSE_COEF;
   // static int X_MAX;
   // static int Y_MAX;
   static int UP;
   static int DOWN;
   static int LEFT;
   static int RIGHT;
   static int MAX_WALLS_NUMBER;
   static int MAX_LIVES_NUMBER;

   field Snake snake; // the square of this game
   field Apple apple;
   field Array walls;
   field int currentWallIndex;
   field int currentDirection; // the snake's current direction: 
                               // 0=up, 1=right, 2=down, 3=left
   field PseudoRandomNumberGenerator numberGenerator;
   field boolean isGameOver;

   function void init() {
      var int numberOfSquares;

      let MAX_WALLS_NUMBER = 40;
      let UP = 0;
      let DOWN = 1;
      let LEFT = 2;
      let RIGHT = 3;
      // let X_MAX = 512 / TRANSPOSE_COEF;
      // let Y_MAX = 256 / TRANSPOSE_COEF;
      // do SnakePart.init(TRANSPOSE_COEF);
      // do Apple.init(TRANSPOSE_COEF);
      // do Wall.init(TRANSPOSE_COEF);

      let numberOfSquares = X_MAX * Y_MAX;
      do GridMap.init();
      return;
   }

   function int getUP() { return UP; }
   function int getDOWN() { return DOWN; }
   function int getLEFT() { return LEFT; }
   function int getRIGHT() { return RIGHT; }

   /** Constructs a new Square Game. */
   constructor SnakeGame new() {

      var int snakeHeadX, snakeHeadY, numFieldSquare, i;

      do createInitialScreen();
      let isGameOver = false;
      let numberGenerator = PseudoRandomNumberGenerator.new(449);

      let currentWallIndex = 0;
      let walls = Array.new(MAX_WALLS_NUMBER);

      let snakeHeadX = numberGenerator.randMod(X_MAX, 0);
      let snakeHeadY = numberGenerator.randMod(Y_MAX, 2);
      
      let snake = Snake.new(snakeHeadX, snakeHeadY);
      do createApple();

      return this;
   }

   method void createInitialScreen() {
      var String scoreStr;
      let scoreStr = "score:";
      do Output.moveCursor(0, 2);
      do Output.printString(scoreStr);
      do scoreStr.dispose();

      do Output.moveCursor(0, 9);
      do Output.printInt(0);
      do Screen.drawLine(0, 15, 511, 15);
      return;
   }

   method void updateScore() {
      do Output.moveCursor(0, 9);
      do Output.printInt(snake.getLength() - 1);
      return;
   }

   method void createWall() {
      var boolean isEmptySquare, isCoordinatesValid;
      var int wallX, wallY;
      var Wall newWall;

      let isEmptySquare = false;

      while (~isCoordinatesValid) {

         let wallX = numberGenerator.randMod(X_MAX - 1, 1);
         let wallY = numberGenerator.randMod(Y_MAX - 1, 2);
         let isEmptySquare = (FieldMap.getFromTheMap(wallX, wallY) = 0);

         if (isEmptySquare & Wall.checkIfNeghborsLessThan(wallX, wallY, 2)) {
            let isCoordinatesValid = true;
         }
      }

      if (~(currentWallIndex = MAX_WALLS_NUMBER)) {
         let newWall = Wall.new(wallX, wallY);
         let walls[currentWallIndex] = newWall;
         do FieldMap.markOnTheMap(wallX, wallY, 3);
         do newWall.draw();
         let currentWallIndex = currentWallIndex + 1;
      }

      return;
   }

   method void createApple() {

      var boolean isEmptySquare, isCoordinatesValid, appleMaxX, appleMaxY;
      var int appleX, appleY;

      let isEmptySquare = false;
      let appleMaxX = X_MAX - 1;
      let appleMaxY = Y_MAX - 1;

      while (~isCoordinatesValid) {

         let appleX = numberGenerator.randMod(appleMaxX, 1);
         let appleY = numberGenerator.randMod(appleMaxY, 2);
         let isEmptySquare = (FieldMap.getFromTheMap(appleX, appleY) = 0);

         if (isEmptySquare) {
            let isCoordinatesValid = true;
         }
      }

      if (~(apple = null)) {
         // do apple.erase();
         do apple.dispose();
      }

      let apple = Apple.new(appleX, appleY);
      do FieldMap.markOnTheMap(appleX, appleY, 2);
      do apple.draw();
      return;
   }

   /** Disposes this game. */
   method void dispose() {
      do snake.dispose();
      do Memory.deAlloc(this);
      return;
   }

   /** Moves the square in the current direction. */
   method void moveSnake(int adirection) {
      var boolean isValidMove, isNewDirectionValid;
      var int headDirection;
      var SnakePart snakeHead;

      let snakeHead = snake.getHead();
      let headDirection = snakeHead.getDirection();

      let isNewDirectionValid = isNewHeadDirectionValid(adirection, headDirection);
      if (isNewDirectionValid) {
         let isValidMove = snake.move(adirection);
      }
      else {
         let isValidMove =  snake.move(headDirection);
         do Output.printString("INVALID");
      }
      if (~isValidMove) {
         do createGameOverScreen();
      }
      return;
   }

   method void increaseSnake() {
      do snake.increase();
      return;
   }

   method boolean isSnakeTookApple() {
      var SnakePart snakeHead;
      var int snakeHeadX, snakeHeadY, appleX, appleY;

      let snakeHead = snake.getHead();
      let snakeHeadX = snakeHead.getX();
      let snakeHeadY = snakeHead.getY();
      let appleX = apple.getX();
      let appleY = apple.getY();

      if ((snakeHeadX = appleX) & (snakeHeadY = appleY)) {
         return true;
      }
      else {
         return false;
      }
   }

   method boolean isNewHeadDirectionValid(int newDirection, int currentDirection) {
      if ((newDirection = UP) & (currentDirection = DOWN)) {
         return false;
      }
      if ((newDirection = DOWN) & (currentDirection = UP)) {
         return false;
      }
      if ((newDirection = LEFT) & (currentDirection = RIGHT)) {
         return false;
      }
      if ((newDirection = RIGHT) & (currentDirection = LEFT)) {
         return false;
      }
      return true;
   }

   /** Runs the game: handles the user's inputs and moves the square accordingly */
   method void run() {

      var char key;  // the key currently pressed by the user
      var int timePassedSinceLastDraw;
      var boolean exit, isSnakeTookApple;

      let exit = false;
      let timePassedSinceLastDraw = 0;
      
      while ((~exit) & (~isGameOver)) {

         let timePassedSinceLastDraw = timePassedSinceLastDraw + 1;
         let key = Keyboard.keyPressed();
         if (timePassedSinceLastDraw = 200) {
            do moveSnake(currentDirection);
            let isSnakeTookApple = isSnakeTookApple();
            if (isSnakeTookApple) {
               let isSnakeTookApple = false;
               do increaseSnake();
               do updateScore();
               do createApple();
               do createWall();
            }
            let timePassedSinceLastDraw = 0;
         }
         
         if (key = 81)  { let exit = true; }     // q key
         if (key = 131) { let currentDirection = UP; }   // up arrow
         if (key = 133) { let currentDirection = DOWN; }   // down arrow
         if (key = 130) { let currentDirection = LEFT; }   // left arrow
         if (key = 132) { let currentDirection = RIGHT; }   // right arrow

         do Sys.wait(1);
      }
      return;
   }


   method void createGameOverScreen() {
      var String gameOverStr;
      let gameOverStr = "GAME OVER";
      let isGameOver = true;

      do Output.moveCursor(12, 27);
      do Output.printString(gameOverStr);
      do Sys.wait(1000);
      return;
   }
}