/** Implements a graphical wall. */
class Wall {

    field int x, y; // location of the Wall on the square grid

    constructor Wall new(int ax, int ay) {
        let x = ax;
        let y = ay;
        return this;
    }

    method void draw() {

        var int memAddress;
        do GridMap.markEntityOnTheMap(x, y, GridMap.getWALL());
        let memAddress = GridMap.getSquareTopLeftCornerMemoryAddress(x, y);

        do Memory.poke(memAddress+0, 8224);
        do Memory.poke(memAddress+32, 8224);
        do Memory.poke(memAddress+64, 8224);
        do Memory.poke(memAddress+96, -1);
        do Memory.poke(memAddress+128, 1028);
        do Memory.poke(memAddress+160, 1028);
        do Memory.poke(memAddress+192, 1028);
        do Memory.poke(memAddress+224, -1);
        do Memory.poke(memAddress+256, 16448);
        do Memory.poke(memAddress+288, 16448);
        do Memory.poke(memAddress+320, 16448);
        do Memory.poke(memAddress+352, -1);
        do Memory.poke(memAddress+384, 2056);
        do Memory.poke(memAddress+416, 2056);
        do Memory.poke(memAddress+448, 2056);
        do Memory.poke(memAddress+480, -1);
        return;
    }

    /** Checks if the square with coordinates (ax, ay) has less neighbor walls than "number".
        This is needed in order to generate walls in a way so that "closed rooms" would not appear on the map,
        into which the snake could not enter. */
    function boolean checkIfNeghborsLessThan(int ax, int ay, int number) {

        var int numOfNeighbourWalls, entity, i , j, currentNeighborX, currentNeighborY;
        var boolean isWall;
        let numOfNeighbourWalls = 0;
        let i = -1;
        let j = -1;

        while (~(i = 2)) {
            let currentNeighborX = ax + i;
            while (~(j = 2)) {
                let currentNeighborY = ay + j;
                let entity = GridMap.getEntityFromTheMap(currentNeighborX, currentNeighborY);
                let isWall = (entity = GridMap.getWALL());
                if (isWall) {
                    let numOfNeighbourWalls = numOfNeighbourWalls + 1;
                }
                let j = j + 1;
            }
            let i = i + 1;
        }

        if (numOfNeighbourWalls < number) {
            return true;
        }
        else {
            return false;
        }
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
}