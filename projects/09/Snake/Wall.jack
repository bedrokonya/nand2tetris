class Wall {

    static int TRANSPOSE_COEF;
    field int x, y;


    // function void init(int coef) {
    //     let TRANSPOSE_COEF = coef;
    //     return;
    // }

    constructor Wall new(int Ax, int Ay) {
        let x = Ax;
        let y = Ay;
        return this;
    }

    function boolean checkIfNeghborsLessThan(int ax, int ay, int number) {

        var int numOfNeighbourWalls, fieldValue, i , j, currentNeighborX, currentNeighborY;
        var boolean isWall;
        let numOfNeighbourWalls = 0;
        let i = -1;
        let j = -1;

        while (~(i = 2)) {
            let currentNeighborX = ax + i;
            while (~(j = 2)) {
                let currentNeighborY = ay + j;
                let fieldValue = FieldMap.getFromTheMap(currentNeighborX, currentNeighborY);
                let isWall = (fieldValue = 3);
                if (isWall) {
                    let numOfNeighbourWalls = numOfNeighbourWalls + 1;
                }
                let j = j + 1;
            }
            let i = i + 1;
        }

        if (numOfNeighbourWalls < number) {
            return true;
        }
        else {
            return false;
        }
    }

    method void draw() {

        var int location, memAddress;
        let location = (32 * y * TRANSPOSE_COEF) + (x * TRANSPOSE_COEF / 16);
        let memAddress = 16384 + location;

        do Memory.poke(memAddress+0, 8224);
        do Memory.poke(memAddress+32, 8224);
        do Memory.poke(memAddress+64, 8224);
        do Memory.poke(memAddress+96, -1);
        do Memory.poke(memAddress+128, 1028);
        do Memory.poke(memAddress+160, 1028);
        do Memory.poke(memAddress+192, 1028);
        do Memory.poke(memAddress+224, -1);
        do Memory.poke(memAddress+256, 16448);
        do Memory.poke(memAddress+288, 16448);
        do Memory.poke(memAddress+320, 16448);
        do Memory.poke(memAddress+352, -1);
        do Memory.poke(memAddress+384, 2056);
        do Memory.poke(memAddress+416, 2056);
        do Memory.poke(memAddress+448, 2056);
        do Memory.poke(memAddress+480, -1);
        return;
    }

    method void erase() {
        do Screen.setColor(false);
        do Screen.drawRectangle(x*TRANSPOSE_COEF, y*TRANSPOSE_COEF, ((x+1)*TRANSPOSE_COEF)-1, ((y+1)*TRANSPOSE_COEF)-1);
        return;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
}