
/** Represents the grid of squares on the screen and remembers what each square contains.
    Class is made static as I needed access to it from different locations in the code,
    and I didn't want to pass it as an arguments everywhere */
class GridMap {

    static int SQUARE_WIDTH; // the width of a single square in the grid
    static int X_MAX; // maximum amount of squares in the grid along the X axis
    static int Y_MAX; // maximum amount of squares in the grid along the Y axis

    static Array map; // for remembering what entity currently placed in an arbitrary square of the grid;
                      // all squares on the grid can be enumerated thus they can ne stored in the array

    // enumeration of entities which can be contained in an arbitrary square
    static int EMPTY;
    static int SNAKE;
    static int APPLE;
    static int WALL;

    /** Initiates the constants and fills in the map with 0's. */
    function void init() {

        var int i;

        let EMPTY = 0;
        let SNAKE = 1;
        let APPLE = 2;
        let WALL = 3;

        let SQUARE_WIDTH = 16;
        let X_MAX = 512 / SQUARE_WIDTH;
        let Y_MAX = 256 / SQUARE_WIDTH;

        let numberOfSquares = X_MAX * Y_MAX;
        let map = Array.new(numberOfSquares);
        let i = 0;
        // initially grid is empty, thus every square of the grid contains EMPTY(=0)
        while (~(i = numberOfSquares)) {
           let map[i] = 0;
           let i = i + 1;
        }
        return;
    }

    function int getEMPTY() { return 0; }
    function int getSNAKE() { return 1; }
    function int getAPPLE() { return 2; }
    function int getWALL() { return 3; }

    /** Calculates the array index of the square with coordinates (x, y). */
    function int getArrayIndexFromGridXY(int x, int y) {
        var int arrayIndex;
        let arrayIndex = (y * X_MAX) + x;
        return arrayIndex;
    }

    /** Remembers that square of the grid with coordinates (x, y) contains specific entity. */
    function void markEntityOnTheMap(int x, int y, int entity) {

        var int arrayIndex;
        let arrayIndex = getArrayIndexFromGridXY(x, y);
        let map[arrayIndex] = entity;

        return;
    }

    /** Shows which entity the square of the grid with coordinates (x, y) contains. */
    function int getEntityFromTheMap(int x, int y) {
        var int result, arrayIndex;
        let arrayIndex = getArrayIndexFromGridXY(x, y);
        // let result = map[arrayIndex];
        return map[arrayIndex];
    }

    /** Checks if square with coordinates (x, y) is out of grid. */
    function boolean checkIfOutOfMap(int x, int y) {

        if ((y < 1) | (x < 0)) {
            return true;
        }
        if ((y > (X_MAX - 1)) | (x > (Y_MAX - 1))) {
            return true;
        }
        return false;
    }

    /** Returens memory address of the top left corner pixel of the grid square with coordinates (x, y). */
    function int getSquareTopLeftCornerMemoryAddress(int x, int y) {
        var int location, memAddress;
        let location = (32 * y * SQUARE_WIDTH) + (x * SQUARE_WIDTH / 16);
        let memAddress = 16384 + location;
    }

    /** Cleans everything that was drawed in the square with coordinates (x, y) and forgets which entity it containted */
    function void eraseGridSquare(int x, int y) {
        do markEntityOnTheMap(x, y, 0);
        do Screen.setColor(false);
        do Screen.drawRectangle(x*SQUARE_WIDTH, y*SQUARE_WIDTH, ((x+1)*SQUARE_WIDTH)-1, ((y+1)*SQUARE_WIDTH)-1);
        return;
    }
}